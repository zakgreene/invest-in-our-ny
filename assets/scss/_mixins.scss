


@mixin heading-sm {
    font-family: $header-font;
    font-size: $font-md;
    font-weight: 500;
    line-height: $leading-base;
    @extend %sm-caps;
    color: $header-bg;
    margin-bottom: 1em;

    &:first-of-type {
        margin-top: 0;
    }
}

@mixin heading-lg {
    font-family: $header-font;
    font-size: $font-lg-mobile;
    font-weight: 700;
    line-height: $leading-xtight;
    border: 0;
    padding-bottom: 0;
    margin: 0 0 1.25rem;
    max-width: $p-center-max;
    color: $header-bg;
    letter-spacing: 0.025em;
    // text-shadow: 0.05em 0.1em 0 $light-yellow;

    @include mq($md) {
        font-size: $font-lg;
    }

    &:last-child {
        margin-bottom: 0;
    }

    &:first-of-type {
        margin-top: 0;
    }
}

@mixin heading-body {
    font-family: $body-font;
    font-size: $font-md;
    font-weight: 700;
    line-height: $leading-tight;
    margin: 0 0 0.5em;
    max-width: $p-center-max;
    text-align: center;
    color: $header-bg;
    letter-spacing: 0;
    text-align: left;

    &:last-child {
        margin-bottom: 0;
    }

    &:first-of-type {
        margin-top: 0;
    }
}

// @mixin heading-md {
//     font-family: $header-font;
//     font-size: 1.4375rem;
//     line-height: $leading-tight;
//     margin-bottom: 1rem;
//     border: 0;
//     padding-bottom: 0;
//     color: $header;

//     @include mq($md) {
//         font-size: 2.06em;
//         margin-bottom: 2rem;
//     }

//     &:last-child {
//         margin-bottom: 0;
//     }
// }

%sm-caps {
    text-transform: uppercase;
    font-weight: 700;
    letter-spacing: 0.05em;
}


@mixin arrow-right {
    content: '';
    width: 0; 
    height: 0; 
    border-top: 0.475em solid transparent;
    border-bottom: 0.475em solid transparent;
    border-left: 1.2em solid $white;
    display: inline-block;
    vertical-align: middle;
}


@mixin arrow-left {
    content: '';
    width: 0; 
    height: 0; 
    border-top: 0.475em solid transparent;
    border-bottom: 0.475em solid transparent;
    border-right: 1.2em solid $white;
    display: inline-block;
    vertical-align: middle;
}



@mixin dark-bg {
    background: $navy;
    color: $white;

    h1, h2, h3, h4, h5, h6 {
        color: $white;
    }

    a {
        @include link-dark-bg;
    }

    strong {
        color: $light-yellow;
    }
}


@mixin link-dark-bg {
    color: $light-cyan;
    opacity: 0.7;

    &:hover, &:focus {
        opacity: 1;
        color: $white;
    }

    &[aria-current=page] {
        opacity: 1;
        color: $white;
    }
}


@mixin button {
    display: inline-block;
    vertical-align: middle;
    padding: 0.66em 1.5em;
    border: 0;
    border-radius: 0.33rem;
    font-size: 1rem;
    color: $white;
    background: $link;
    text-decoration: none;
    text-align: center;
    transition: $transition-short;
    cursor: pointer;
    font-family: $header-font;
    @extend %sm-caps;
    appearance: none;

    &:hover, &:focus, .button-wrap:hover &, .button-wrap:hover & {
        background: $link-hover;
        color: $white;
    }

    .icon {
        height: 1.25em;
        width: 1.25em;
        vertical-align: middle;
        margin: 0;
    }

    &.btn-inactive {
        opacity: 0.5;

        &:hover, &:focus {
            background: $link;
        }
    }
}

@mixin button-lg-override {
    font-family: $header-font !important;
    font-size: 1.5rem !important;
    letter-spacing: 0.05em !important;
    border-radius: 0.25em !important;
    padding: 0.66em !important;
    line-height: normal !important;
    transition: $transition-short !important;
    background-color: $link !important;
    appearance: none;

    @include mq($md) {
        font-size: $font-lg-mobile !important;
    }

    &:hover, &:focus {
        background: $link-hover !important;
    }
}


@mixin input {
    display: inline-block;
    width: 100%;
    vertical-align: middle;
    padding: 0.5em 0.75em;
    transition: $transition-short;
    border: $border;
}


@mixin list-reset {
    list-style: none;
    margin: 0;
}




// The Media Query Mixin
// FOR: Write less verbose Media Queries with variables
// or using straight figures (eg 320px)
// WHY: Faster to write. More flexible. Lets you write
// media query variables on the fly.
// USE: @include mq(320px, 798px);
// USE: @include mq($tablet, $desktop);
// USE: @include mq(max, $desktop);

@mixin mq($bp-1, $bp-2:null) {
    @if $bp-1 == "max" {
        @media (max-width:$bp-2 - 1) {
            @content;
        }
    }
    @elseif $bp-2 == "max" {
        @media (max-width:$bp-1 - 1) {
            @content;
        }
    }
    @elseif $bp-2 == null {
        @media (min-width:$bp-1) {
            @content;
        }
    }
    //single bp

    @else {
        @media (min-width:$bp-1) and (max-width:$bp-2 - 1) {
            @content;
        }
    }
    //bracketed breakpoint
}


// same mixin but using min-height instead of min-width

@mixin mqh($bp-1, $bp-2:null) {
    @if $bp-1 == "max" {
        @media (max-height:$bp-2 - 1) {
            @content;
        }
    }
    @elseif $bp-2 == "max" {
        @media (max-height:$bp-1 - 1) {
            @content;
        }
    }
    @elseif $bp-2 == null {
        @media (min-height:$bp-1) {
            @content;
        }
    }
    //single bp

    @else {
        @media (min-height:$bp-1) and (max-height:$bp-2 - 1) {
            @content;
        }
    }
    //bracketed breakpoint
}


@mixin clearfix {
    &:after {
        content: " "; display: block; clear: both;
    }
}

// Visually Hidden
// Hide elements visually but not from screen readers. Great for accessibility hints like skip to content.
@mixin hidden {
    border: 0;
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
    white-space: nowrap;
}

@mixin shown {
    border: 0;
    clip: auto;
    clip-path: none;
    height: auto;
    margin: 0;
    overflow: visible;
    position: static;
    width: auto;
    white-space: normal;
}



// usage: apply to video container div
@mixin video {
    position: relative;
    padding-bottom: 56.25%; /* 16:9 */
    height: 0;
    overflow: hidden;

    > iframe {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
}


////////////////////////////////////////////////
//
//  Layout
//
////////////////////////////////////////////////

// USAGE
// ----------
// $cols        = how many columns in the grid
// $spacing     = how much space between each item on each side
// $cols-prev   = was there a different grid at an earlier media query
//                that needs to be overridden. if so, how many columns was it?

@mixin grid-flex-item($cols, $spacing: 1.25em, $cols-prev: $cols - 1) {
    margin-bottom: $spacing;
    margin-right: $spacing;
    width: calc(#{100% / $cols} - #{$spacing * ($cols - 1) / $cols});

    // add override for if grid was in a different configuration on smaller screens
    // must come before the last column's margin-right: 0
    &:nth-child(#{$cols-prev}n) {
        margin-right: $spacing;
    }

    &:nth-child(#{$cols}n) {
        margin-right: 0;
    }
}